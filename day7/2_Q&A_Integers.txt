以下の質問を日本語で回答してください。
Q. How does Python store integers internally?
最も単純な表現は、小さな正の整数で、2進数システムを使用して、固定量のコンピューターメモリで各整数を表します。


Q. What's the binary number system?
2進数では整数をビットの連続として表します。ビットは0か１であり、コンピューターで情報を表すための基礎です。
たとえば、1100011は
99 = 1・64 + 1・32 + 0・16 + 0・8 + 0・4 + 1・2 + 1・1　の整数を表します。
10のべき乗を使用することを除いて、より一般的な10進数のシステムは同じですが、10の累乗を使用します。数字を2進数に変換することはとても興味深い問題で、次のセクションで考えましょう。小さな整数の場合、Pythonは固定数のビットを使用します。これは通常、コンピューターの基本的な設計パラメーター（通常は32または64）によって決まります。たとえば、整数99は32ビットで表される場合があります00000000000000000000000001100011。


Q. How about negative numbers?
小さな負の数は、2の補数と呼ばれる規則で処理されます。これを詳細に考慮する必要はありません。「small」の定義は、基盤となるコンピューターシステムによって異なります。旧式の32ビットマシン上で、 "小"は、典型的範囲をカバーします。-2147483648（-2 31）から2147483647（2 31 - 1）。典型的には、範囲をカバー-2新しい64ビットマシン上で、「小」63 2 63-1、その場合、「小さい」はそれほど小さくありません。整数が「小さくない」場合、Pythonは自動的に、コンピュータシステムで使用可能なメモリの量によって範囲が制限されます。これらの内部表現の詳細はプログラムから隠されているので、それらを変更せずに異なる表現を持つシステムで使用できます。


Q. What does the expression 1/0 evaluate to in Python?
ZeroDivisionError実行時に発生させます。注：このような質問に答える最も簡単な方法は、Pythonのインタラクティブモードを使用することです。それを試してみてください！


Q. How do the floored division operator // and remainder operator % work on negative operands?
試してみてください！-47 // 5は-10と評価され、-47 % 5は3に評価されます。一般化すると、打ち切り除算//は割り算の余りを省きます。つまり、商はマイナス無限大に丸められます。剰余演算子の動作%はより複雑です。Pythonでは、aとbが整数の場合、式a % bはと同じ符号を持つ整数に評価されます。これはb * (a // b) + a % b == a、任意の整数aとのことを意味します。他の一部の言語（Javaなど）では、式a % bはと同じ符号を持つ整数に評価されます。
（floored division ：打ち切り除算や切り捨て除算と呼ばれる。）


Q. How does the exponentiation operator ** work with negative operands?
試して、自分の目で確かめてください。**演算子は、左側の単項プラス/マイナス演算子より優先順位が高く、右側の単項プラス/マイナス演算子より優先順位が低いことに注意してください。たとえば、-3**4は-81（81ではなく）に評価されます。また、異なるタイプのオブジェクトになる可能性もあります。例えば、10**-2は浮動小数点0.01、(-10)**(10**-2)Pythonの3の複素数に評価される（しかし、Pythonの2ランタイムエラーが発生します）。
（**：a**b→aのb乗）
（float：floatとは、 Python の組み込み型の1つで、浮動小数点を扱います。）



Q. Why does 10^6 evaluate to 12 instead of 1000000?
^オペレータは、（あなたが考える必要があります）指数演算子ではありません。代わりに、この本では使用しない演算子です。あなたはリテラル1000000が欲しい。リテラルが十分な場合、式を使用することもできますが　10**6　式（実行時に答えが必要）を使用するのは無駄です。
（＾：a ^ b # XOR:排他的論理和(aまたはbが1のビットが1)）