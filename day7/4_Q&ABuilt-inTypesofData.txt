以下の質問を日本語で回答してください。
Q. What happens if I access a variable that I haven't bound to an object?
A. Pythonは実行時にNameErrorを発生させます。


Q. How can I determine the type of a variable?
A. それはトリックな質問です。多くのプログラミング言語（Javaなど）の変数とは異なり、Python変数には型がありません。代わりに、型を持つのは、変数がバインドされているオブジェクトです。次のコードフラグメントのように、同じ変数を異なるタイプのオブジェクトにバインドできます。
x = 'Hello、World' 
x = 17 
x = True


Q. How can I determine the type, identity, and value of an object?
A. Pythonには、この目的のための組み込み関数が用意されています。この関数type()はオブジェクトのタイプを返します。関数id()はオブジェクトのIDを返します。この関数repr()は、オブジェクトの明確な文字列表現を返します。
>>>import math
>>> a = math.pi 
>>> id（a）
140424102622928 
>>> type（a）

>>> repr（a）
'3.141592653589793'
これらの関数を通常のプログラミングで使用することはめったにありませんが、デバッグするときに役立つ場合があります。


Q. Is there a difference between = and == ?
A.はい、かなり違います。1つ目は変数への割り当てを指定し、2つ目はboolの結果を生成する比較演算子です。この解答に対するあなたの理解度は、このセクションの内容を理解したかどうか確認テストです。違いを友達にどのように説明できるか考えてください。


Q. Will a < b < c test whether the three numbers a, b, and c are in order?
A. はい。Pythonはa < b < c、標準の数学的規則に従って動作するような比較の連鎖を任意でサポートしています。ただし、多くのプログラミング言語（Javaなど）ではa < b < cは不正です。理由は部分式a < bがブールで解答され、そのブールは数値と比較されるためです。これは意味がありません。この本では連鎖比較は使用しません。代わりに、(a < b) and (b < c)などの式を使用します。


Q. Will a = b = c = 17 set the three variables to 17?
A. はい。Python割り当てステートメントは式ではありませんが、Pythonは割り当てステートメントのチェーンを任意でサポートしています。多くのPythonプログラマーはスタイルが悪いと見なしているため、本では連鎖代入を使用していません。


Q. Can I use the logical operators and, or, and not with operands that are not booleans?
A.はい。ただし、明確にするために、通常はそうすることはお勧めしません。このコンテキストでは、Pythonは0.0、0、および空の文字列''をFalseと見なし、その他の整数、浮動小数点数、または文字列をTrueと見なします。


Q. Can I use arithmetic operators with boolean operands?
A. はい。ただし、これを行うのは好ましくありません。ブール演算子を算術演算子で使用すると、それらは整数に昇格されます：0は Falseおよび1はTrue。たとえば、(False - True - True) * Trueはint値に評価されます-2。


Q. Can I name a variable max?
A. はい。ただし、そうすると、組み込み関数max()を使用できなくなります。その他の組み込み関数min()、sum()、float()、eval()、open()、id()、type()、file()、も同じことが成り立つ。

