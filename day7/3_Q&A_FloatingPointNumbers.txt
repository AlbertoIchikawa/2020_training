以下の質問を日本語で回答してください
Q. Why is the type for real numbers named float?
A. 小数点は、実数を構成する桁間で「浮動」する可能性があります。対照的に、整数では、（暗黙的に）小数点は最下位桁の後に固定されます。


Q. How does Python store floating-point numbers internally?
A. 一般に、Pythonは基礎となるコンピューターシステムにとって自然な表現を使用します。最近のほとんどのコンピュータシステムは、IEEE 754標準で定義されている浮動小数点数を格納します。この規格では、浮動小数点数は、符号、仮数、指数の3つのフィールドを使用して格納されると規定されています。興味がある場合は、詳細についてWikipedia IEEE浮動小数点ページを参照してください。IEEE 754標準は、特別な浮動小数点値（正のゼロ、負のゼロ、正の無限大、負の無限大、およびNaN（数値ではない））の処理方法も指定しています。たとえば、、そしてに-0.0/3.0は-0.0と評価される。1.0/0.0は正の無限大に評価される。0.0/0.0はNaNとなる。一部の単純な計算では、（かなり変わった）式float('inf')とfloat('-inf')して正と負の無限大を計算できますが、PythonはIEEE 754標準のこの部分に準拠していません。たとえば、Pythonで、-0.0/3.0が正確に評価されて-0.0ますが、1.0/0.0と0.0/0.0の両方は実行時にZeroDivisionErrorと表示される。



Q. Fifteen digits for floating-point numbers certainly seems enough to me. Do I really need to worry much about precision?
A. はい。コンピュータは常に近似を処理するのに対し、無限の精度で実数に基づく数学に慣れているためです。たとえば、IEEE 754浮動小数点では、式は(0.1 + 0.1 == 0.2)でTrue!と評価されます。しかし、(0.1 + 0.1 + 0.1 == 0.3)はFalseと評価されます。このような落とし穴は、科学計算では珍しいことではありません。初心者プログラマーは、2つの浮動小数点数が等しいかどうかを比較しないでください。


Q. It is annoying to see all those digits when writing a float. Is it possible to get stdio.write() and stdio.writeln() to write just two or three digits after the decimal point?
A.ブックサイト関数stdio.writef()は、この仕事を行う1つの方法です。セクション1.5で説明したように、Cプログラミング言語や他の多くの現代言語の基本的なフォーマットされた書き込み関数に似ています。それまでは、余分な数字を使用します（そうすることで、さまざまな種類の数字に慣れるのに役立つため、すべてが悪いわけではありません）。

Q. Can I apply the floored division operator // to two float operands?
A. はい、オペランドの床関数を生成します。つまり、結果は、小数点以下の桁が除かれた商になります。この本では、フロートに床除算演算子を使用していません。
（ //：　a //= b # a = a // b に同じ）

Q. What does round() return if the fractional part of its argument is 0.5?
A.パイソン3では、最も近い偶数の整数を返します。round(2.5)なら2、round(3.5)なら4、そしてround(-2.5)だと-2。しかし、Python 2では、round()関数はゼロから小数点以下切り上げ（浮動小数点数を返します）するため、round(2.5)is 3.0、round(3.5)は 4.0、round(-2.5)は-3.0です。


Q. Can I compare a float to an int?
A. タイプ変換を行わなくても、Pythonが必要なタイプ変換を自動的に行うことを覚えておいてください。たとえば、xが整数3であり、式(x < 3.1)はTrueとなる。理由はPythonは整数を促進するため、3を生成するために浮動小数点数3.0、次いで、比較3.0して3.1。


Q. Are there functions in Python's math module for other trigonometric functions, such as arc sine, hyperbolic sine, and secant?
A. はい、Pythonのmathモジュールには逆三角関数と双曲線関数が含まれています。しかし、割線、コセカント、および余接のための機能が存在しないです、あなたはmath.sin()、math.cos()とmath.tan()を使って簡単に計算します。APIに含める関数を選択することは、必要なすべての関数を用意することの利便性と、長いリストから必要な数少ない関数の1つを見つけなければならないという煩わしさのトレードオフです。間違いなくすべてのユーザーが満足しているわけではないです。しかしPythonデザイナーは多くのユーザーが満足しています。ここに挙げたAPIにも冗長性がたくさんあることに注意してください。たとえばmath.sin(x) / math.cos(x)代わりに使用できますmath.tan(x)。
（trigonometric　：　三角関数）


